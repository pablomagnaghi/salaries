// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"salaries/pkg/api"
	"salaries/pkg/domain"
	"sync"
)

// Ensure, that SalaryRepositoryMock does implement SalaryRepository.
// If this is not the case, regenerate this file with moq.
var _ SalaryRepository = &SalaryRepositoryMock{}

// SalaryRepositoryMock is a mock implementation of SalaryRepository.
//
//	func TestSomethingThatUsesSalaryRepository(t *testing.T) {
//
//		// make and configure a mocked SalaryRepository
//		mockedSalaryRepository := &SalaryRepositoryMock{
//			CreateFunc: func(salary *domain.Salary) (*domain.Salary, error) {
//				panic("mock out the Create method")
//			},
//			DeleteByIDFunc: func(salaryID int64) error {
//				panic("mock out the DeleteByID method")
//			},
//			GetContractsStatsFunc: func() (*api.Stats, error) {
//				panic("mock out the GetContractsStats method")
//			},
//			GetDepartmentsStatsFunc: func() ([]api.DepartmentStats, error) {
//				panic("mock out the GetDepartmentsStats method")
//			},
//			GetStatsForAllSalariesFunc: func() (*api.Stats, error) {
//				panic("mock out the GetStatsForAllSalaries method")
//			},
//			GetSubDepartmentsStatsFunc: func() ([]api.SubDepartmentStats, error) {
//				panic("mock out the GetSubDepartmentsStats method")
//			},
//			ReadAllFunc: func() ([]domain.Salary, error) {
//				panic("mock out the ReadAll method")
//			},
//		}
//
//		// use mockedSalaryRepository in code that requires SalaryRepository
//		// and then make assertions.
//
//	}
type SalaryRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(salary *domain.Salary) (*domain.Salary, error)

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(salaryID int64) error

	// GetContractsStatsFunc mocks the GetContractsStats method.
	GetContractsStatsFunc func() (*api.Stats, error)

	// GetDepartmentsStatsFunc mocks the GetDepartmentsStats method.
	GetDepartmentsStatsFunc func() ([]api.DepartmentStats, error)

	// GetStatsForAllSalariesFunc mocks the GetStatsForAllSalaries method.
	GetStatsForAllSalariesFunc func() (*api.Stats, error)

	// GetSubDepartmentsStatsFunc mocks the GetSubDepartmentsStats method.
	GetSubDepartmentsStatsFunc func() ([]api.SubDepartmentStats, error)

	// ReadAllFunc mocks the ReadAll method.
	ReadAllFunc func() ([]domain.Salary, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Salary is the salary argument value.
			Salary *domain.Salary
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// SalaryID is the salaryID argument value.
			SalaryID int64
		}
		// GetContractsStats holds details about calls to the GetContractsStats method.
		GetContractsStats []struct {
		}
		// GetDepartmentsStats holds details about calls to the GetDepartmentsStats method.
		GetDepartmentsStats []struct {
		}
		// GetStatsForAllSalaries holds details about calls to the GetStatsForAllSalaries method.
		GetStatsForAllSalaries []struct {
		}
		// GetSubDepartmentsStats holds details about calls to the GetSubDepartmentsStats method.
		GetSubDepartmentsStats []struct {
		}
		// ReadAll holds details about calls to the ReadAll method.
		ReadAll []struct {
		}
	}
	lockCreate                 sync.RWMutex
	lockDeleteByID             sync.RWMutex
	lockGetContractsStats      sync.RWMutex
	lockGetDepartmentsStats    sync.RWMutex
	lockGetStatsForAllSalaries sync.RWMutex
	lockGetSubDepartmentsStats sync.RWMutex
	lockReadAll                sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SalaryRepositoryMock) Create(salary *domain.Salary) (*domain.Salary, error) {
	if mock.CreateFunc == nil {
		panic("SalaryRepositoryMock.CreateFunc: method is nil but SalaryRepository.Create was just called")
	}
	callInfo := struct {
		Salary *domain.Salary
	}{
		Salary: salary,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(salary)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSalaryRepository.CreateCalls())
func (mock *SalaryRepositoryMock) CreateCalls() []struct {
	Salary *domain.Salary
} {
	var calls []struct {
		Salary *domain.Salary
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *SalaryRepositoryMock) DeleteByID(salaryID int64) error {
	if mock.DeleteByIDFunc == nil {
		panic("SalaryRepositoryMock.DeleteByIDFunc: method is nil but SalaryRepository.DeleteByID was just called")
	}
	callInfo := struct {
		SalaryID int64
	}{
		SalaryID: salaryID,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(salaryID)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//
//	len(mockedSalaryRepository.DeleteByIDCalls())
func (mock *SalaryRepositoryMock) DeleteByIDCalls() []struct {
	SalaryID int64
} {
	var calls []struct {
		SalaryID int64
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// GetContractsStats calls GetContractsStatsFunc.
func (mock *SalaryRepositoryMock) GetContractsStats() (*api.Stats, error) {
	if mock.GetContractsStatsFunc == nil {
		panic("SalaryRepositoryMock.GetContractsStatsFunc: method is nil but SalaryRepository.GetContractsStats was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetContractsStats.Lock()
	mock.calls.GetContractsStats = append(mock.calls.GetContractsStats, callInfo)
	mock.lockGetContractsStats.Unlock()
	return mock.GetContractsStatsFunc()
}

// GetContractsStatsCalls gets all the calls that were made to GetContractsStats.
// Check the length with:
//
//	len(mockedSalaryRepository.GetContractsStatsCalls())
func (mock *SalaryRepositoryMock) GetContractsStatsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetContractsStats.RLock()
	calls = mock.calls.GetContractsStats
	mock.lockGetContractsStats.RUnlock()
	return calls
}

// GetDepartmentsStats calls GetDepartmentsStatsFunc.
func (mock *SalaryRepositoryMock) GetDepartmentsStats() ([]api.DepartmentStats, error) {
	if mock.GetDepartmentsStatsFunc == nil {
		panic("SalaryRepositoryMock.GetDepartmentsStatsFunc: method is nil but SalaryRepository.GetDepartmentsStats was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDepartmentsStats.Lock()
	mock.calls.GetDepartmentsStats = append(mock.calls.GetDepartmentsStats, callInfo)
	mock.lockGetDepartmentsStats.Unlock()
	return mock.GetDepartmentsStatsFunc()
}

// GetDepartmentsStatsCalls gets all the calls that were made to GetDepartmentsStats.
// Check the length with:
//
//	len(mockedSalaryRepository.GetDepartmentsStatsCalls())
func (mock *SalaryRepositoryMock) GetDepartmentsStatsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDepartmentsStats.RLock()
	calls = mock.calls.GetDepartmentsStats
	mock.lockGetDepartmentsStats.RUnlock()
	return calls
}

// GetStatsForAllSalaries calls GetStatsForAllSalariesFunc.
func (mock *SalaryRepositoryMock) GetStatsForAllSalaries() (*api.Stats, error) {
	if mock.GetStatsForAllSalariesFunc == nil {
		panic("SalaryRepositoryMock.GetStatsForAllSalariesFunc: method is nil but SalaryRepository.GetStatsForAllSalaries was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetStatsForAllSalaries.Lock()
	mock.calls.GetStatsForAllSalaries = append(mock.calls.GetStatsForAllSalaries, callInfo)
	mock.lockGetStatsForAllSalaries.Unlock()
	return mock.GetStatsForAllSalariesFunc()
}

// GetStatsForAllSalariesCalls gets all the calls that were made to GetStatsForAllSalaries.
// Check the length with:
//
//	len(mockedSalaryRepository.GetStatsForAllSalariesCalls())
func (mock *SalaryRepositoryMock) GetStatsForAllSalariesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetStatsForAllSalaries.RLock()
	calls = mock.calls.GetStatsForAllSalaries
	mock.lockGetStatsForAllSalaries.RUnlock()
	return calls
}

// GetSubDepartmentsStats calls GetSubDepartmentsStatsFunc.
func (mock *SalaryRepositoryMock) GetSubDepartmentsStats() ([]api.SubDepartmentStats, error) {
	if mock.GetSubDepartmentsStatsFunc == nil {
		panic("SalaryRepositoryMock.GetSubDepartmentsStatsFunc: method is nil but SalaryRepository.GetSubDepartmentsStats was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSubDepartmentsStats.Lock()
	mock.calls.GetSubDepartmentsStats = append(mock.calls.GetSubDepartmentsStats, callInfo)
	mock.lockGetSubDepartmentsStats.Unlock()
	return mock.GetSubDepartmentsStatsFunc()
}

// GetSubDepartmentsStatsCalls gets all the calls that were made to GetSubDepartmentsStats.
// Check the length with:
//
//	len(mockedSalaryRepository.GetSubDepartmentsStatsCalls())
func (mock *SalaryRepositoryMock) GetSubDepartmentsStatsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSubDepartmentsStats.RLock()
	calls = mock.calls.GetSubDepartmentsStats
	mock.lockGetSubDepartmentsStats.RUnlock()
	return calls
}

// ReadAll calls ReadAllFunc.
func (mock *SalaryRepositoryMock) ReadAll() ([]domain.Salary, error) {
	if mock.ReadAllFunc == nil {
		panic("SalaryRepositoryMock.ReadAllFunc: method is nil but SalaryRepository.ReadAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReadAll.Lock()
	mock.calls.ReadAll = append(mock.calls.ReadAll, callInfo)
	mock.lockReadAll.Unlock()
	return mock.ReadAllFunc()
}

// ReadAllCalls gets all the calls that were made to ReadAll.
// Check the length with:
//
//	len(mockedSalaryRepository.ReadAllCalls())
func (mock *SalaryRepositoryMock) ReadAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReadAll.RLock()
	calls = mock.calls.ReadAll
	mock.lockReadAll.RUnlock()
	return calls
}
